% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/unique.R
\name{assert_unique}
\alias{assert_unique}
\alias{check_unique}
\title{Simple assertion for jointly unique variable}
\usage{
assert_unique(df, ...)

check_unique(df, ...)
}
\arguments{
\item{df}{the input data.frame}

\item{...}{unquoted variable names to check for joint uniqueness. Allows for non-standard evaluation}
}
\description{
\code{check_unique} will check that variables are jointly unique and return TRUE/FALSE,
along with a helpful message. \code{assert_unique} will stop if there are any duplicate rows.
}
\examples{
library(dplyr)
# Month and day should be jointly unique in the airquality dataset
airquality \%>\% check_unique(Month, Day)

# As part of an analysis pipeline
airquality \%>\%
    assert_unique(Month, Day) \%>\%
    summarise(ave_temp = mean(Temp))

# Example of message on false:
airquality \%>\% check_unique(Month)

# A very common workflow is:
# 1. Read data in and assert that it has the right unique IDs
# 2. Join and assert that the join result has the right unique IDs

reporters_str <- 'reporter_id,first_name,last_name\\n1,"John","Smith"\\n2,"Patty","Johnson"'
articles_str <- 'article_id,reporter_id,title\\n1,1,"First article by John"\\n2,1,"Second article by John"\\n3,2,"First article by Patty"'

reporters <- readr::read_csv(reporters_str) \%>\% assert_unique(reporter_id)
articles <- readr::read_csv(articles_str) \%>\% assert_unique(article_id)

# Join reporter names into the articles data.frame,
# then check that you understood the relationship correctly and didn't create duplicates
articles_reporterinfo <- inner_join(articles, reporters, by = "reporter_id") \%>\%
    assert_unique(article_id)

}
\seealso{
\code{\link{get_dups}} which allows you to interactively extract duplicates when an assertion fails
}
